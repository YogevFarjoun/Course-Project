name: CI/CD - Vite React (Docker)

on:
  push:
    branches: ["main"]
    tags: ["v*", "release-*"]
  pull_request:
    branches: ["main"]
  workflow_dispatch: {}

concurrency:
  group: ci-cd-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
  id-token: write
  attestations: write

env:
  IMAGE_NAME: vite-react-app
  DOCKER_NAMESPACE: yogevfarjoun
  DOCKER_REGISTRY_TARGET: dockerhub # dockerhub | nexus
  NEXUS_REPO: docker-hosted

jobs:
  # ---------- CI (Node: build) ----------
  test-and-build:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Lint (optional)
        run: npm run lint --if-present

      - name: Tests (optional)
        run: npm test --if-present

      - name: Build Vite
        run: npm run build

      - name: Upload dist (PR only)
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist
          if-no-files-found: ignore

  # ---------- CI (Python: unit tests) ----------
  python-unit-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: pip-${{ runner.os }}-

      - name: Install test requirements
        run: |
          pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install pytest unittest2
          fi

      - name: Run unit tests (pytest)
        run: python -m pytest --junitxml results.xml tests/*.py

      - name: Upload test report (JUnit)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: python-tests-junit-${{ github.sha }}
          path: results.xml
          if-no-files-found: warn

  # ---------- CI (Python: lint) ----------
  python-lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: pip-${{ runner.os }}-

      - name: Install pylint
        run: |
          pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install pylint
          fi

      - name: Run pylint
        run: |
          set -e
          found_py=$(ls -1 *.py 2>/dev/null | wc -l || true)
          if [ "$found_py" -gt 0 ]; then
            python -m pylint *.py
          fi
          found_tests=$(ls -1 tests/*.py 2>/dev/null | wc -l || true)
          if [ "$found_tests" -gt 0 ]; then
            python -m pylint tests/*.py
          fi

  # ---------- Docker: build & push ----------
  docker:
    runs-on: ubuntu-latest
    needs: [test-and-build, python-unit-tests, python-lint]
    timeout-minutes: 20
    if: github.event_name != 'pull_request'
    outputs:
      image_ref: ${{ steps.target.outputs.image_ref }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Decide target registry & compose image ref
        id: target
        run: |
          if [ "${{ env.DOCKER_REGISTRY_TARGET }}" = "nexus" ]; then
            if [ -z "${{ secrets.NEXUS_REGISTRY }}" ]; then
              echo "NEXUS_REGISTRY secret is missing"; exit 1
            fi
            REGISTRY="${{ secrets.NEXUS_REGISTRY }}"
            IMAGE_REF="${REGISTRY}/${{ env.NEXUS_REPO }}/${{ env.IMAGE_NAME }}"
          else
            REGISTRY="docker.io"
            IMAGE_REF="docker.io/${{ env.DOCKER_NAMESPACE }}/${{ env.IMAGE_NAME }}"
          fi
          echo "registry=${REGISTRY}" >> $GITHUB_OUTPUT
          echo "image_ref=${IMAGE_REF}" >> $GITHUB_OUTPUT

      - name: Log in to Docker Hub
        if: steps.target.outputs.registry == 'docker.io'
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to Nexus
        if: steps.target.outputs.registry != 'docker.io'
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.NEXUS_REGISTRY }}
          username: ${{ secrets.NEXUS_USERNAME }}
          password: ${{ secrets.NEXUS_PASSWORD }}

      - name: Docker meta (tags & labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.target.outputs.image_ref }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,format=long
            type=ref,event=tag
            type=ref,event=branch

      - name: Build & Push image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate build provenance
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ steps.target.outputs.image_ref }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: false

      - name: Upload provenance (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: provenance-${{ github.sha }}
          path: "**/*.intoto.jsonl"
          if-no-files-found: ignore

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.target.outputs.image_ref }}@${{ steps.build.outputs.digest }}
          format: spdx-json
          artifact-name: sbom-${{ github.sha }}.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ github.sha }}
          path: sbom-*.spdx.json

  # ---------- Security Vulnerability Scanning (Snyk) ----------
  snyk-scan:
    runs-on: ubuntu-latest
    needs: [docker]
    timeout-minutes: 15
    env:
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      SNYK_ORG: ${{ secrets.SNYK_ORG }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Snyk via npm
        run: npm install -g snyk

      - name: Verify SNYK_TOKEN presence
        run: |
          if [ -z "$SNYK_TOKEN" ]; then
            echo "SNYK_TOKEN is missing"; exit 1
          fi
          echo "SNYK_TOKEN length: $(printf "%s" "$SNYK_TOKEN" | wc -c)"

      - name: Snyk auth
        run: snyk auth "$SNYK_TOKEN"

      - name: Login to Docker Hub
        if: startsWith(needs.docker.outputs.image_ref, 'docker.io/')
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull built Docker image
        run: docker pull ${{ needs.docker.outputs.image_ref }}:latest

      - name: Snyk container test (high+)
        run: snyk container test ${{ needs.docker.outputs.image_ref }}:latest --file=Dockerfile --severity-threshold=high

      - name: Snyk JSON report
        continue-on-error: true
        run: snyk container test ${{ needs.docker.outputs.image_ref }}:latest --file=Dockerfile --severity-threshold=high --json > snyk-report.json

      - name: Upload Snyk report
        uses: actions/upload-artifact@v4
        with:
          name: snyk-report-${{ github.sha }}
          path: snyk-report.json
          if-no-files-found: ignore

  # ---------- CD (Ephemeral Deploy for smoke test) ----------
  deploy:
    name: Ephemeral Deploy (smoke test on runner)
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        if: startsWith(needs.docker.outputs.image_ref, 'docker.io/')
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull latest image
        run: docker pull ${{ needs.docker.outputs.image_ref }}:latest

      - name: Run container (port 8080 -> 80)
        run: |
          docker run -d --name vite-react -p 8080:80 ${{ needs.docker.outputs.image_ref }}:latest
          for i in {1..30}; do
            if curl -fsS http://localhost:8080 >/dev/null; then
              echo "App is up ✅"
              exit 0
            fi
            echo "Waiting for app ($i)..."
            sleep 1
          done
          echo "App did not respond in time ❌"
          docker logs vite-react || true
          exit 1

      - name: Teardown
        if: always()
        run: docker rm -f vite-react || true
